import os
import re

def extract_functions_from_file(file_path):
    with open(file_path, 'r') as file:
        content = file.read()

    # Regular expression to match C function declarations with pointer return types
    pattern = r'\b(?:static\s+)?(?:inline\s+)?(?:const\s+)?(?:int|void|char|float|double)\s*\**\s*([a-zA-Z_]\w*)\s*\([^)]*\)\s*(?=\{)'

    functions = re.findall(pattern, content)

    return functions

#C:/Users/ASUS/PycharmProjects/pythonProject4/Code3/New/Image/C_Files
#C:/Users/ASUS/PycharmProjects/pythonProject4/Code3/New/rad2/C_Files
#C:/Users/ASUS/PycharmProjects/pythonProject4/Code3/New/rad2/Functions1
#C:/Users/ASUS/PycharmProjects/pythonProject4/Code3/New/ffm2/C_Files
#C:/Users/ASUS/PycharmProjects/pythonProject4/Code3/New/ffm2/Functions1
#C:/Users/ASUS/PycharmProjects/pythonProject4/Code3/New/Chrome1/C_Files
#C:/Users/ASUS/PycharmProjects/pythonProject4/Code3/New/Chrome1/Functions1
def extract_functions_from_directory():
    input_directory = "C:/Users/ASUS/PycharmProjects/pythonProject4/Code3/New/Chrome1/New"  # Specify input directory path here
    output_directory = "C:/Users/ASUS/PycharmProjects/pythonProject4/Code3/New/Chrome1/Functions1"  # Specify output directory path here

    if not os.path.exists(output_directory):
        os.makedirs(output_directory)

    for file_name in os.listdir(input_directory):
        if file_name.endswith('.c')or file_name.endswith(".cpp"):
            input_file_path = os.path.join(input_directory, file_name)
            functions = extract_functions_from_file(input_file_path)
            for i, func_name in enumerate(functions, start=1):
                with open(input_file_path, 'r') as file:
                    content = file.read()
                    pattern = r'\b(?:static\s+)?(?:inline\s+)?(?:const\s+)?(?:int|void|char|float|double)\s*\**\s*' + func_name + r'\s*\([^)]*\)\s*(?=\{)'
                    match = re.search(pattern, content)
                    if match:
                        func_declaration = match.group(0)
                        func_declaration_end = match.end()  # Position of the end of the function declaration
                        # Find the matching closing curly brace for the function body
                        brace_count = 0
                        func_body_end = func_declaration_end
                        for char_index, char in enumerate(content[func_declaration_end:], start=func_declaration_end):
                            if char == '{':
                                brace_count += 1
                            elif char == '}':
                                brace_count -= 1
                                if brace_count == 0:
                                    func_body_end = char_index
                                    break
                        func_body = content[func_declaration_end:func_body_end+1].strip()  # Extract function body
                        output_file_name = f"{os.path.splitext(file_name)[0]}_{func_name}_{i}.c"
                        output_file_path = os.path.join(output_directory, output_file_name)
                        with open(output_file_path, 'w') as output_file:
                            output_file.write(f"// Function extracted from {file_name}\n\n")
                            output_file.write(f"{func_declaration}\n")
                            output_file.write(f"{func_body}\n")  # Write function body
    print("Functions extracted and saved successfully.")

extract_functions_from_directory()
