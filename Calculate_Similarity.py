import os
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

def read_files_from_directory(directory):
    file_contents = []
    fun_names = []
    for filename in os.listdir(directory):
        if filename.endswith(".txt"):
            fun_names.append(filename)
            with open(os.path.join(directory, filename), 'r', encoding='utf-8-sig', errors='ignore') as file:
                file_contents.append(file.read())
    return fun_names, file_contents

# Directory paths for queries and documents
query_directory = 'C:/Users/ASUS/PycharmProjects/pythonProject4/Code3/New/test/excel/corpus1'
document_directory = 'C:/Users/ASUS/PycharmProjects/pythonProject4/Code3/New/ffm2/Functions3'


#query_directory = 'C:/Users/ASUS/PycharmProjects/pythonProject4/Code3/New/test/excel/corpus1'
#npdg_directory = 'C:/Users/ASUS/PycharmProjects/pythonProject4/Code3/New/ffm2/Functions2'

# Read queries and documents from directories
fun_names, documents = read_files_from_directory(document_directory)
report_names, queries = read_files_from_directory(query_directory)
print("Query:", queries)

tfidf_vectorizer = TfidfVectorizer()
tfidf_matrix_documents = tfidf_vectorizer.fit_transform(documents)
query_vector = tfidf_vectorizer.transform(queries)
print("Similarity scores with all documents:")

# with multiplied g_terms
for query in query_vector:
    cosine_similarities = cosine_similarity(query, tfidf_matrix_documents)
    g_terms = [tfidf_matrix_documents[i].sum() for i in range(len(documents))]
    normalized_g_terms = (g_terms - min(g_terms)) / (max(g_terms) - min(g_terms))
    # Modified cosine simila
    results = [(fun_names[i], normalized_g_terms[i] * cosine_similarities[0][i]) for i in range(len(documents))]
    results.sort(key=lambda x: x[1], reverse=True)
    for doc, similarity in results:
        print(f"{doc}: {similarity}")
    top_50_results = results[:50]  # Select the top 10 results
    for doc, similarity in top_50_results:
        print(f"Document: {doc}, Similarity Score: {similarity}")
